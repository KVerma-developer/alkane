{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kv082\\\\OneDrive\\\\Desktop\\\\alkane\\\\client\\\\src\\\\pages\\\\Home.jsx\";\nimport React from \"react\";\nimport Navbar from \"../components/Common/Navbar\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-2xl mx-auto relative\",\n      children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-5\",\n        children: [\"Joi is a popular JavaScript library used for data validation. It provides a simple and powerful way to define schemas and validate data against those schemas. Joi is commonly used in server-side applications, especially with Node.js, to ensure that incoming data meets certain requirements or constraints. Here are some key features and concepts of Joi: Schema Definition: With Joi, you can define a schema that represents the structure and constraints of your data. The schema can include various types of data such as strings, numbers, booleans, dates, arrays, and objects.\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"text-blue-600 hover:underline\",\n          href: \"/settings\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"Alkane Posts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = Home;\nexport default Home;\n\n// import React from \"react\";\n\n// const Home = () => {\n// \tconst handleLogout = () => {\n// \t\tlocalStorage.removeItem(\"token\");\n// \t\twindow.location.reload();\n// \t};\n\n// \treturn (\n// \t\t<div >\n// \t\t\t<nav >\n// \t\t\t\t<h1>fakebook</h1>\n// \t\t\t\t<button  onClick={handleLogout}>\n// \t\t\t\t\tLogout\n// \t\t\t\t</button>\n// \t\t\t</nav>\n// \t\t</div>\n// \t);\n// };\n\n// export default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","Navbar","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","children","className","fileName","_jsxFileName","lineNumber","columnNumber","href","target","rel","_c","$RefreshReg$"],"sources":["C:/Users/kv082/OneDrive/Desktop/alkane/client/src/pages/Home.jsx"],"sourcesContent":["import React from \"react\";\r\nimport Navbar from \"../components/Common/Navbar\";\r\n\r\nconst Home = () => {\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div className=\"max-w-2xl mx-auto relative\">\r\n\t\t<Navbar />\r\n        \r\n\r\n        <p className=\"mt-5\">\r\n\t\tJoi is a popular JavaScript library used for data validation. It provides a simple and powerful way to define schemas and validate data against those schemas. Joi is commonly used in server-side applications, especially with Node.js, to ensure that incoming data meets certain requirements or constraints.\r\n\r\nHere are some key features and concepts of Joi:\r\n\r\nSchema Definition: With Joi, you can define a schema that represents the structure and constraints of your data. The schema can include various types of data such as strings, numbers, booleans, dates, arrays, and objects.{\" \"}\r\n          <a\r\n            className=\"text-blue-600 hover:underline\"\r\n\t\t\thref=\"/settings\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            Alkane Posts\r\n          </a>\r\n          .\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\n\r\n// import React from \"react\";\r\n\r\n// const Home = () => {\r\n// \tconst handleLogout = () => {\r\n// \t\tlocalStorage.removeItem(\"token\");\r\n// \t\twindow.location.reload();\r\n// \t};\r\n\r\n// \treturn (\r\n// \t\t<div >\r\n// \t\t\t<nav >\r\n// \t\t\t\t<h1>fakebook</h1>\r\n// \t\t\t\t<button  onClick={handleLogout}>\r\n// \t\t\t\t\tLogout\r\n// \t\t\t\t</button>\r\n// \t\t\t</nav>\r\n// \t\t</div>\r\n// \t);\r\n// };\r\n\r\n// export default Home;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,6BAA6B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEjD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAGjB,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,eACEJ,OAAA;MAAKK,SAAS,EAAC,4BAA4B;MAAAD,QAAA,gBAC/CJ,OAAA,CAACF,MAAM;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAGJT,OAAA;QAAGK,SAAS,EAAC,MAAM;QAAAD,QAAA,GAAC,ikBAKiM,EAAC,GAAG,eACvNJ,OAAA;UACEK,SAAS,EAAC,+BAA+B;UAClDK,IAAI,EAAC,WAAW;UACPC,MAAM,EAAC,QAAQ;UACfC,GAAG,EAAC,qBAAqB;UAAAR,QAAA,EAC1B;QAED;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC,KAEN;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC,gBACN,CAAC;AAEP,CAAC;AAACI,EAAA,GA5BIV,IAAI;AA8BV,eAAeA,IAAI;;AAGnB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}